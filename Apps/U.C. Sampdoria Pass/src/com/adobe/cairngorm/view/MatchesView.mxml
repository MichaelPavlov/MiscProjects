<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/halo" 
		  x="0" y="0" right="10" top="10" left="10" bottom="10" 
		  width="100%" height="100%"
		  xmlns:imagecropper="com.flexblocks.imagecropper.*" 
		  xmlns:sqlite="com.peterelst.air.sqlite.*"
		  creationComplete="this_creationCompleteHandler(event)" 
		  xmlns:dialog="com.adobe.cairngorm.view.dialog.*" 
		  xmlns:components="com.adobe.cairngorm.view.components.*">
	
	<fx:Script>
		<![CDATA[
			import com.adobe.cairngorm.event.CustomDataGridEvent;
			import com.adobe.cairngorm.model.ApplicationModelLocator;
			import com.adobe.cairngorm.view.skins.FiltroRigBtnSkin;
			import com.adobe.cairngorm.view.skins.NuovoNuenteFriendBtnSkin;
			
			import flash.events.MouseEvent;
			import flash.events.SQLEvent;
			
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			[Bindable]
			private var model:ApplicationModelLocator = ApplicationModelLocator.getInstance();
			
			protected function btnNewUser_clickHandler(event:MouseEvent):void {				
				newMatchDialog.visible = true
			}
			
			public function refreshData():void {
				newMatchDialog.close();
				getSeasons_query.execute();
			}

			protected function getMatches_query_resultHandler(event:SQLEvent):void {				
				matchesList.dataProvider = event.target.data;
			}

			protected function fromDate_changeHandler(event:CalendarLayoutChangeEvent):void {
				this.btnFilter_clickHandler(null);
			}


			protected function untilDate_changeHandler(event:CalendarLayoutChangeEvent):void {
				this.btnFilter_clickHandler(null);
			}


			protected function btnFilter_clickHandler(event:MouseEvent):void {
				var selectedSeason:String = (seasons.selectedIndex == -1)?'':seasons.selectedItem.season;
				
				if (fromDate.selectedDate == null && untilDate.selectedDate == null && selectedSeason == '') {
					getMatches_query.execute();
					return;
				} 
				
				if (fromDate.selectedDate == null) {
					searchMatches_query.sql = "SELECT * FROM matches WHERE season LIKE @SEARCHSEASON OR matchdate <= @UNTILDATE AND deleted = 0";
					searchMatches_query.parameters = [selectedSeason, untilDate.selectedDate];
				} else if (untilDate.selectedDate == null) {
					searchMatches_query.sql = "SELECT * FROM matches WHERE season LIKE @SEARCHSEASON OR matchdate >= @FROMDATE AND deleted = 0";
					searchMatches_query.parameters = [selectedSeason, fromDate.selectedDate];
				} else {
					searchMatches_query.sql="SELECT * FROM matches WHERE season LIKE @SEARCHSEASON OR matchdate BETWEEN @FROMDATE AND @UNTILDATE AND deleted = 0";
					searchMatches_query.parameters = [selectedSeason, fromDate.selectedDate, untilDate.selectedDate];
				}
				
				searchMatches_query.execute();
			}

			protected function getSeasons_query_resultHandler(event:SQLEvent):void {
				if (event.target.data == null) {
					return;
				}
				
				model.seasonsData = new ArrayCollection(event.target.data);
				getMatches_query.execute();
			}


			protected function btnClear_clickHandler(event:MouseEvent):void {
				fromDate.selectedDate = null;
				untilDate.selectedDate = null;
				seasons.selectedIndex = -1;
				getMatches_query.execute();
			}


			protected function this_creationCompleteHandler(event:FlexEvent):void {
				refreshData();
				model.watchComboBox(seasons);
			}

			protected function matchesList_editActionHandler(event:CustomDataGridEvent):void {
				newMatchDialog.editMatch(event.item);
			}


			protected function matchesList_deleteActionHandler(event:CustomDataGridEvent):void {
				Alert.yesLabel = "sÃ¬";
				Alert.noLabel = "no";
				Alert.show('Sei sicuro di voler cancellare questo incontro?', 
					'', 
					(Alert.YES | Alert.NO), 
					null, 
					function(evt:CloseEvent):void {
						if (evt.detail == Alert.YES) {
							updateMatchDeletedStutus_query.parameters = [1, event.item.id];
							updateMatchDeletedStutus_query.execute();
						} else {
							return;
						}
					});
			}


			protected function matchesList_showPassActionHandler(event:CustomDataGridEvent):void {
				model.searchPassByMatchID = event.item.id;
				model.searchPassByUserID = -1;
				this.dispatchEvent(new Event('switchToPass'));
			}


			protected function seasons_dataChangeHandler(event:FlexEvent):void {
				// TODO Auto-generated method stub
			}


			protected function seasons_clickHandler(event:MouseEvent):void
			{
				
				// TODO Auto-generated method stub
			}

		]]>
	</fx:Script>
	
	<fx:Metadata>
		[Event(name="switchToPass", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Declarations>
		
		<sqlite:Query id="getSeasons_query"
					  connection="{model.dbHandler.connection}"
					  sql="SELECT * FROM seasons"
					  result="getSeasons_query_resultHandler(event)"/>
		
		<sqlite:Query id="getMatches_query"
					  connection="{model.dbHandler.connection}"
					  sql="SELECT * FROM matches WHERE deleted = 0"
					  result="getMatches_query_resultHandler(event)"/>
		
		<sqlite:Query id="searchMatches_query"
					  connection="{model.dbHandler.connection}"
					  sql="SELECT * FROM matches WHERE deleted = 0 AND season LIKE @SEARCHSEASON OR matchdate BETWEEN @FROMDATE AND @UNTILDATE"
					  result="getMatches_query_resultHandler(event)"/>
		<sqlite:Query id="updateMatchDeletedStutus_query"
					  connection="{model.dbHandler.connection}"
					  sql="UPDATE matches SET deleted=@DELETED WHERE id = @ID"
					  result="refreshData()"/>
		
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%">
	
		<s:HGroup width="100%" height="30">
			<mx:Spacer/>
			<s:Button label="FILTRO RICERCA" skinClass="com.adobe.cairngorm.view.skins.FiltroRigBtnSkin" styleName="iconButton"/>
			<s:Button label="NUOVO INCONTRO" skinClass="com.adobe.cairngorm.view.skins.NuovoNuenteFriendBtnSkin" styleName="iconButton"
					  click="btnNewUser_clickHandler(event)"/>		
		</s:HGroup>
		<s:Border width="100%" backgroundColor="#DDDDDD" height="65">
			<s:HGroup right="10" top="10" left="10" bottom="10"
					  verticalAlign="middle"
					  gap="15">
				
				<s:VGroup>
					<s:Label text="Dal" styleName="windowLabel"/>
					<mx:DateField id="fromDate" yearNavigationEnabled="true"
								  dayNames="{['D', 'L', 'M', 'M', 'G', 'V', 'S']}" firstDayOfWeek="1"
								  monthNames="{['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre']}"
								  width="120" editable="true"
								  formatString="DD/MM/YYYY"
								  change="fromDate_changeHandler(event)"/>
				</s:VGroup>
				
				<s:VGroup>
					<s:Label text="Al" styleName="windowLabel"/>
					<mx:DateField id="untilDate" yearNavigationEnabled="true"
								  width="120" editable="true"
								  dayNames="{['D', 'L', 'M', 'M', 'G', 'V', 'S']}" firstDayOfWeek="1"
								  monthNames="{['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre']}"
								  formatString="DD/MM/YYYY"
								  change="untilDate_changeHandler(event)"/>
				</s:VGroup>
				
				<s:VGroup>
					<s:Label text="Stagione" styleName="windowLabel"/>
					<mx:ComboBox id="seasons" labelField="season"
								 dataProvider="{model.seasonsData}"
								 prompt="Seleziona stagione"
								 dataChange="seasons_dataChangeHandler(event)"
								 click="seasons_clickHandler(event)"
								 change="btnFilter_clickHandler(null)"/>
				</s:VGroup>
				
				<s:VGroup height="100%" bottom="5">
					<mx:Spacer height="100%"/>
					<s:HGroup>
						
						<!--<s:Button id="btnFilter" label="Filtra" 
								  fontSize="11"
								  click="btnFilter_clickHandler(event)"/>-->
						
						<s:Button id="btnClear" label="Azzera"
								  fontSize="11"
								  click="btnClear_clickHandler(event)"/>
						
					</s:HGroup>
				</s:VGroup>
				
				
				
			</s:HGroup>
		</s:Border>
		
		<components:MatchesDataGrid id="matchesList" width="100%" height="100%"
									editAction="matchesList_editActionHandler(event)"
									deleteAction="matchesList_deleteActionHandler(event)"
									showPassAction="matchesList_showPassActionHandler(event)"/>
		
	</s:VGroup>
	
	<dialog:NewMatchDialog id="newMatchDialog" visible="false"
						   newMatchAdded="refreshData()"/>
	
</s:Group>
