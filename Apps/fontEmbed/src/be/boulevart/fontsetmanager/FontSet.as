/** * @author wimvanhenden * @version 1.0 */package be.boulevart.fontsetmanager {	import flash.text.StyleSheet;		import flash.display.Loader;	import flash.display.LoaderInfo;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.text.Font;	import flash.utils.Timer;		public class FontSet extends EventDispatcher {		//- PRIVATE & PROTECTED VARIABLES -------------------------------------------------------------------------		private var _fontsetobject : FontSetObject;		private var _fontsetloaded : Boolean;		private var _cssloaded : Boolean;		private var _timer : Timer;		private var _stylesheet : StyleSheet;		//- PUBLIC & INTERNAL VARIABLES ---------------------------------------------------------------------------		public static const DEFAULT_NAME : String = "be.boulevart.fontsetcontroller.FontSet";		public static const ACTIVATED : String = "fontsetcontrolleractivated";				//- CONSTRUCTOR	-------------------------------------------------------------------------------------------		public function FontSet(value : FontSetObject) {			this._fontsetobject = value;			this._fontsetloaded = false;			this._cssloaded = false;		}		//- PRIVATE & PROTECTED METHODS ---------------------------------------------------------------------------		private function loadStyles() : void {						if (_fontsetobject.css != "") {				var cssLoader : URLLoader = new URLLoader();				cssLoader.addEventListener(Event.COMPLETE, handleCSSComplete);				cssLoader.load(new URLRequest(_fontsetobject.css));			} else {				_cssloaded = true;			}		}		private function loadFonts() : void {			var myloader : Loader = new Loader();			var ldrContext : LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);			myloader.contentLoaderInfo.addEventListener(Event.COMPLETE, fontIsLoaded);			myloader.load(new URLRequest(_fontsetobject.swf), ldrContext);		}		private function checkActivation(event : TimerEvent) : void {			if (_cssloaded && _fontsetloaded ) {				_timer.stop();				_timer.removeEventListener(TimerEvent.TIMER_COMPLETE, checkActivation);					dispatchEvent(new Event(ACTIVATED));						}		}		private function linkFontsToClass(value : ApplicationDomain) : void {			var fontLibrary : Class = value.getDefinition(_fontsetobject.classname) as Class;					for (var i : Number = 0;i < _fontsetobject.fontnames.length;i++) {				Font.registerFont(fontLibrary[_fontsetobject.fontnames[i]]);					}		}		//- PUBLIC & INTERNAL METHODS -----------------------------------------------------------------------------		public function activateFontSet() : void {			loadStyles();			loadFonts();						_timer = new Timer(500);			_timer.addEventListener(TimerEvent.TIMER, checkActivation);			_timer.start();		}				//- EVENT HANDLERS ----------------------------------------------------------------------------------------		private function fontIsLoaded(e : Event) : void {			var info : LoaderInfo = e.target as LoaderInfo;			linkFontsToClass(info.applicationDomain);			_fontsetloaded = true;		}		private function handleCSSComplete(e : Event) : void {			stylesheet = new StyleSheet();			stylesheet.parseCSS(e.target.data);			_cssloaded = true;		}		//- GETTERS & SETTERS -------------------------------------------------------------------------------------		public function set stylesheet( value : StyleSheet ) : void {			_stylesheet = value;		}		public function get stylesheet() : StyleSheet {			return _stylesheet;		}					//- HELPERS -----------------------------------------------------------------------------------------------		//- END CLASS ---------------------------------------------------------------------------------------------	}}